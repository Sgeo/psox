PSOX is strongly inspired by, and designed to be a sort of
replacement for, PESOIX.. Revision 2
of http://jonripley.com/easel/ep_specs.txt and
http://jonripley.com/easel/api.txt

Please note that PSOX, as described here, is in no way whatsoever
backwards compatible with either PESOIX or EsoAPI 1.0.. if there is
enough demand, I might eventually try to figure out how to fix that..

This started due to concerns about the semantic meaning of 0x00 0x00
and due to displeasure about the idea of PESOIX writing directly to
an esolang's memory..

This is version 0x00 0x00 r20070907 of PSOX..

Terminology: a PSOX client is an app written in a (presumably)
esoteric language that takes advantage of PSOX features. A PSOX
server is what provides those features, and can be implemented as
either part of the client's interpreter, or as a layer between real
stdin/stdout, and the interpreter (preferred). A domain takes the
place of PESOIX's dialects, and represents what in other languages
might be called a library, e.g. File I/O or Direct sockets or HTTP.
An even domain is a domain that is either built directly into the
PSOX spec, or referred to from the PSOX spec as such. A custom
domain does not need to be referred to by the PSOX spec. This
allows people to make their own domains without worrying about
registering anything, as in Funge-98

File descriptors:
A file descriptor is a number between 0 and 255, inclusive. File descriptors let
the app change the meaning of stdin and stdout. Note that safety features, for obvious
reasons, still go through the normal stdin and stdout. Example:
0x00 0x02 0x10 f 0x0A is Change Stdout
0x00 0x02 0x11 f 0x0A is Change Stdin
If there is a file descriptor 0x01 I want to read input from:
0x00 0x02 0x11 0x01 0x0A
from there, future input requests or whatever will read from descriptor 0x01
0x00 is normal stdout in the context of an outfile descriptor, and normal
stdin in the context of an infile descriptor

New file descriptors are always opened on the smallest number available.


A function 0x$$ in domain 0x## is called with:
0x00 0x## 0x$$ 0x0A

Note that some functions might have extended names,
e.g. 0x%% 0x&& in domain 0x## would be called with:

0x00 0x## 0x%% 0x&& 0x0A

The domain defines which functions lead to extended
functions like this.

Longnums:
Some numbers may be specified as longnums. A longnum is an
arbitrary-size integer. A longnum is specified as a series of
indicator bytes and data bytes. The indicator 0x01 means a data
byte follows. The indicator 0x02 can only be used as the first
indicator, and means that a data byte follows, and the number is
negative. The indicator 0x00 means the end of the longnum. Example:

0x1234 becomes:
0x01(INDICATOR: BYTE FOLLOWS)
0x12(DATA)
0x01(INDICATOR: BYTE FOLLOWS)
0x34(DATA)
0x00(INDICATOR: END OF LONGNUM)
Please note that this longnum format is used
ONLY for transmission, and is not suitable for, e.g. a
way to store large numbers on Brainf*ck tape..
Also note that, when possible, it is preferred to use
fixed-width numbers instead of longnums. In fact, there
should ALWAYS be an alternative to sending the client a
longnum. For example, a function that asks the user for a
number should allow the client to state how many bytes the
number can be, or 0 if the client is willing to accept a longnum.

Longstrings:
A longstring is a string that follows a similar format to longnums.
It is indicator bytes spread through data, e.g.
0x01 0x41 0x01 0x42 0x01 0x43 0x00 is "ABC"
It is preferred to use longstrings only in cases where the string may contain NULs..

PSOX-Init will be: 0x00 0x07 which is then followed by versioning
information
The client will send versioning information as follows:
MAJOR_VER MIN_MINOR_VER MY_MINOR_VER
MAJOR_VER must be the same on both the client and server, although
server may implement multiple major versions. MIN_MINOR_VER is the
minimum minor version that the client will run on, and
MY_MINOR_VER is the client's actual minor version
The server first responds right after the MAJOR_VER is sent from
the client:

0x00 - SUCCESS
0x01 - DIFFERENT_MAJOR_VER
If successful, the client then sends the minorver information as
specified above. The server then responds:
0x00 - SUCCESS
0x01 - SERVER_MINOR_VER < MIN_MINOR_VER
0x02 - MY_MINOR_VER < LOWEST_SUPPORTED_MINOR_VER [on the Server]

After that, the server responds with its minorver

Once this is done, the app can run normally.. To
output 0x00, 0x00 0x00 0x00 must be used. `0x00 0x00 a` safely prints a.
To use something in PSOX, it must be escaped with 0x00
After the function and all arguments are given, 0x0A must be sent by
the client, with the exception of the function 0x00 0x00



Domains:
Domains are roughly analogous to PESOIX's dialects. However,
instead of specifing a general API, they are more like a library.
One domain might provide functions for printing numbers, and
another might provide networking capability. All domains must
either have a longname, or a shortname, or both. The long-name
is similar to XML namespaces, so that people may, if they want,
use their own custom domain, as long as they can give it a
unique longname. The shortname is a number. Even shortnames
are for domains specified in this spec, or referred directly
from this spec. Odd shortnames are for custom domains, the
domain does not specify a particular odd shortname. The
longname of the domain is mapped by the command
0x00 0x02 0x03 0x## 0x0A to a specified odd shortname.
Custom domains cannot be used by the client until mapped.

A domain that is, for example, originally a custom domain, but
becomes part of the official PSOX spec, may have both a longname
and an even shortname. Modifications might be added to the
longname version, but don't take effect if the domain is used
through the even shortname. The longname version and the even
shortname version could be taken to be slightly different domains.

To map a longname (e.g. "http://example.com/longname") to
an odd shortname (e.g. 0x03):
0x00 0x02 0x03 "http://example.com/longname" 0x0A
The string is a null-terminated string. Note
also that the string simply has to be unique, not necessarily
refer to a real object. However, it is strongly preferred
to use it like an XML namespace, i.e. have it point to
a space that you own.. It can also point to a page on the
http://esolangs.org wiki..
If an attempt is made to map a longname onto an occupied shortname, the old shortname
will be replaced (ONLY if the shortname is odd and greater than 1, of course)

If there is an attempt to map a non-implemented
longname, the shortname remains available.

Pseudodomains:
0x00 0x00 a
    Safely print a
0x00 0x01 num 0x0A
    Requests input from the current infile descriptor. num is the number of bytes to read
    in, or 0x00 to read until the next newline.
    If set number of chars, returns:
        eof_status num_of_chars_not_eof successful_bytes padding_NULs
        EOF status is 0x01 if there was no EOF encountered, 0x00 if there was an EOF
        num_of_chars_not_eof is the number of characters successfully retrieved
        padding_NULS is a number of 0x00 such that the number of successful_bytes + number of padding_NULs = number of requested bytes
    If read until next newline:
        eof_status bytes 0x00
        if there was no EOF, then bytes will naturally include 0x0A
        if there was an EOF, a 0x0A will be added to bytes
        A complimentary 0x00 is added in order to aide processing in certain languages.
PSOX-System domain:
Commands in the PSOX-System domain:

0x00 0x02 0x01 0x## 0x0A
    Exit with status code ##
0x00 0x02 0x02 0x## 0xMIN_MINOR 0xMY_MINOR 0x0A
    Domain installation check: Check that domain ## is installed.
    Returns the same way the versioning for PSOX returned.
0x00 0x02 0x03 0x## somestring 0x0A
    Attempt to map somestring to domain ##. Only for odd ##..
0x00 0x02 0x04 0x0A
    Retrieve NUL-terminated string with the effective command
    line (PSOX server excludes itself from the string)
0x00 0x02 0x06 d f 0x00 0x0A
    Predeclare Unsafe Functionality (explained later)
0x00 0x02 0x08 0x0A
    Returns NUL-terminated string with the server's
    Handprint. This concept is stolen from Funge-98,
    and identifies the server in the same way that a
    longname identifies a custom domain.
    
File descriptor manipulation (in PSOX System Domain):
    
0x00 0x02 0x10 n 0x0A
    Switch outfile descriptor to file descriptor n. Undefined if n is not 
    a valid outfile descriptor.
0x00 0x02 0x11 n 0x0A
    Switch infile descriptor to file descriptor n. Undefined if n is not
    a valid infile descriptor.
0x00 0x02 0x12 L 0x0A
    Absolute seek through the current outfile descriptor to location L,
    where L is a longnum. Numbering starts at 0, and causes the NEXT 
    written character to be at the saught-to position.
    Negative numbers are considered to be the length of the file (if applicable) + 
    the number.
0x00 0x02 0x13 L 0x0A
    Absolute seek through the current infile descriptor to location L,
    where L is a longnum. Numbering starts at 0, and causes the NEXT 
    read-from character to be from the saught position.
    Negative numbers are considered to be the length of the file (if applicable) + 
    the number.
0x00 0x02 0x14 L 0x0A
    Relative seek through the current outfile descriptor by L.
0x00 0x02 0x15 L 0x0A
    Relative seek through the current infile descriptor by L.
0x00 0x02 0x16 0x0A
    Flush the current outfile descriptor
0x00 0x02 0x17 0x0A
    Flush the current infile descriptor
0x00 0x02 0x18 0x0A
    Close the current outfile descriptor and return to stdout. Closing stdout is undefined.
0x00 0x02 0x19 0x0A
    Close the current infile descriptor and return to stdin. Closing stdin is undefined.
    

List of Builtin Domains
=======================
0x00 Pseudodomain-Safe-Print-Output
0x01 Pseudodomain-Input
0x02 PSOX-System
0x04 Simple Utilities:
http://sgeo.diagonalfish.net/esoteric/psox-utils.txt
